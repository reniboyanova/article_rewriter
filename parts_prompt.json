{
  "event_prompt": [
    "Instruction: Identify the main event from this news article and break it down into the following categories:",
    "",
    "main_event: The main event or topic of the article.",
    "type: The broader category the event falls under (e.g., politics, economics, etc.).",
    "subtype: A more specific classification within the type (e.g., parliamentary elections, economic reforms, etc.).",
    "description: A short, concise description of the main event based on the content of the article.",
    "",
    "Example:",
    "",
    "If the main event is 'Political elections,' the type would be 'Politics,' the subtype would be 'Parliamentary elections,' and the description would provide a brief summary based on the article.",
    "",
    "Return the result in JSON format, ensuring the information remains in the original language of the article, while the keys in the JSON file are in English."
  ],
  "entity_prompt": [
    "Instruction: Analyze the text and identify all mentioned entities. Return a single JSON object structured with the following categories:",
    "",
    "1. persons: A list of JSON objects for each mentioned person.",
    "2. organizations: A list of JSON objects for each mentioned organization.",
    "3. collectives: A list of JSON objects for each mentioned collective.",
    "4. species: A list of JSON objects for each mentioned species.",
    "",
    "Each JSON object should include:",
    "entity_name: The name of the entity (person, organization, collective, or species).",
    "main_category: The main category the entity falls under (e.g., 'Person', 'Organization', etc.).",
    "sub_category: A more specific classification within the main category (e.g., 'Scientist', 'Politician', 'Technology Company', etc.).",
    "short_entity_description: A short, concise description of the entity based on the content of the article.",
    "",
    "If any information cannot be determined, assign 'null' to that field.",
    "",
    "Return the result in the following format:",
    "",
    "{",
    "\"persons\": [",
    "{",
    "\"entity_name\": \"Albert Einstein\",",
    "\"main_category\": \"Person\",",
    "\"sub_category\": \"Scientist\",",
    "\"short_entity_description\": \"A theoretical physicist known for the theory of relativity.\"",
    "},",
    "{",
    "\"entity_name\": \"Marie Curie\",",
    "\"main_category\": \"Person\",",
    "\"sub_category\": \"Scientist\",",
    "\"short_entity_description\": \"A physicist and chemist who conducted pioneering research on radioactivity.\"",
    "}",
    "],",
    "\"organizations\": [",
    "{",
    "\"entity_name\": \"Apple Inc.\",",
    "\"main_category\": \"Organization\",",
    "\"sub_category\": \"Technology Company\",",
    "\"short_entity_description\": \"A multinational technology company specializing in consumer electronics and software.\"",
    "},",
    "{",
    "\"entity_name\": \"United Nations\",",
    "\"main_category\": \"Organization\",",
    "\"sub_category\": \"International Organization\",",
    "\"short_entity_description\": \"An intergovernmental organization aimed at promoting international cooperation and peace.\"",
    "}",
    "],",
    "\"collectives\": [],",
    "\"species\": []",
    "}",
    "",
    "If no entities from a category are found, return an empty list for that category (e.g., 'collectives': [])."
  ],
  "object_prompt": [
    "Instruction: Analyze the text and identify all mentioned objects. Return a single JSON object structured with the following categories:",
    "",
    "1. products: A list of JSON objects for each mentioned product.",
    "2. artefacts: A list of JSON objects for each mentioned artefact.",
    "3. creative_works: A list of JSON objects for each mentioned creative work.",
    "",
    "Each JSON object should include:",
    "object_name: The name of the object (product, artefact, or creative work).",
    "object_category: A more specific classification within the main category (e.g., 'painting', 'historical monument', 'sculpture', 'consumer electronics').",
    "object_description: A short, concise description of the object based on the content of the article.",
    "",
    "If any information cannot be determined, assign 'null' to that field.",
    "",
    "Return the result in the following format:",
    "",
    "{",
    "\"products\": [",
    "{",
    "\"object_name\": \"iPhone 14\",",
    "\"object_category\": \"Smartphone\",",
    "\"object_description\": \"A smartphone developed by Apple with advanced camera and processing capabilities.\"",
    "},",
    "{",
    "\"object_name\": \"Tesla Model S\",",
    "\"object_category\": \"Electric Vehicle\",",
    "\"object_description\": \"An electric vehicle developed by Tesla, known for its long range and performance.\"",
    "}",
    "],",
    "\"artefacts\": [",
    "{",
    "\"object_name\": \"Rosetta Stone\",",
    "\"object_category\": \"Historical Monument\",",
    "\"object_description\": \"An ancient stone inscribed with a decree in three scripts, key to deciphering Egyptian hieroglyphs.\"",
    "},",
    "{",
    "\"object_name\": \"Terracotta Army\",",
    "\"object_category\": \"Historical Sculpture\",",
    "\"object_description\": \"A collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China.\"",
    "}",
    "],",
    "\"creative_works\": [",
    "{",
    "\"object_name\": \"The Starry Night\",",
    "\"object_category\": \"Painting\",",
    "\"object_description\": \"A famous painting by Vincent van Gogh, depicting a swirling night sky over a quiet town.\"",
    "},",
    "{",
    "\"object_name\": \"Mona Lisa\",",
    "\"object_category\": \"Painting\",",
    "\"object_description\": \"A portrait painting by Leonardo da Vinci, widely regarded as one of the most famous works of art in history.\"",
    "}",
    "],",
    "\"artefacts\": [],",
    "\"creative_works\": []",
    "}",
    "",
    "If no objects from a category are found, return an empty list for that category (e.g., 'artefacts': [])."
  ],
  "location_prompt": [
    "Instruction: Analyze the text and identify all mentioned locations. Return a single JSON object structured with a list of locations.",
    "",
    "Each location should have the following categories:",
    "1. continent: The continent where the location is found.",
    "2. country: The country of the location.",
    "3. city: The city where the location is found.",
    "4. village: The village (if applicable).",
    "5. district: The district (if applicable).",
    "6. region: The region (if applicable).",
    "7. facility: The facility or specific place (if applicable).",
    "",
    "Each JSON object in the list should include:",
    "location_name: The name of the location.",
    "continent: The continent where the location is found, or 'null' if unknown.",
    "country: The country where the location is found, or 'null' if unknown.",
    "city: The city where the location is found, or 'null' if unknown.",
    "village: The village where the location is found, or 'null' if unknown.",
    "district: The district where the location is found, or 'null' if unknown.",
    "region: The region where the location is found, or 'null' if unknown.",
    "facility: The facility or specific place at the location, or 'null' if unknown.",
    "",
    "Return the result in the following format:",
    "",
    "{",
    "\"locations\": [",
    "{",
    "\"location_name\": \"Pyramids of Giza\",",
    "\"continent\": \"Africa\",",
    "\"country\": \"Egypt\",",
    "\"city\": \"Giza\",",
    "\"village\": \"null\",",
    "\"district\": \"Giza Governorate\",",
    "\"region\": \"null\",",
    "\"facility\": \"Pyramid Complex\"",
    "},",
    "{",
    "\"location_name\": \"Istanbul\",",
    "\"continent\": \"Europe/Asia\",",
    "\"country\": \"Turkey\",",
    "\"city\": \"Istanbul\",",
    "\"village\": \"null\",",
    "\"district\": \"null\",",
    "\"region\": \"Marmara Region\",",
    "\"facility\": \"null\"",
    "}",
    "]",
    "}",
    "",
    "If any field cannot be determined, assign 'null' to that field."
  ],
  "concept_prompt": [
    "Instruction: Analyze the text and identify all mentioned concepts. Return a single JSON object structured with the following categories:",
    "",
    "1. ideas: A list of JSON objects for each mentioned idea.",
    "2. laws: A list of JSON objects for each mentioned law.",
    "3. religions: A list of JSON objects for each mentioned religion.",
    "4. ideologies: A list of JSON objects for each mentioned ideology.",
    "",
    "Each JSON object should include:",
    "concept_name: The name of the concept.",
    "concept_short_description: A short, concise description of the concept based on the content of the article.",
    "",
    "Return the result in the following format:",
    "",
    "{",
    "\"ideas\": [",
    "{",
    "\"concept_name\": \"Democracy\",",
    "\"concept_short_description\": \"A political system in which citizens have the power to make decisions through voting.\"",
    "},",
    "{",
    "\"concept_name\": \"Capitalism\",",
    "\"concept_short_description\": \"An economic system based on private ownership and the free market.\"",
    "}",
    "],",
    "\"laws\": [",
    "{",
    "\"concept_name\": \"Constitutional Law\",",
    "\"concept_short_description\": \"A body of law that defines the role, powers, and structure of different entities within a state.\"",
    "}",
    "],",
    "\"religions\": [",
    "{",
    "\"concept_name\": \"Christianity\",",
    "\"concept_short_description\": \"A monotheistic religion based on the teachings of Jesus Christ.\"",
    "},",
    "{",
    "\"concept_name\": \"Buddhism\",",
    "\"concept_short_description\": \"A religion and philosophy founded by Siddhartha Gautama, centered around enlightenment and the path to Nirvana.\"",
    "}",
    "],",
    "\"ideologies\": [",
    "{",
    "\"concept_name\": \"Socialism\",",
    "\"concept_short_description\": \"A political and economic ideology advocating for collective or governmental control of production and distribution.\"",
    "}",
    "]",
    "}",
    "",
    "If any field cannot be determined, assign 'null' to that field."
  ],
  "quotation_prompt": [
    "Instruction: Analyze the text and identify all mentioned quotations. Return a single JSON object structured with the following categories:",
    "",
    "1. quotations: A list of JSON objects for each mentioned quotation.",
    "",
    "Each JSON object should include:",
    "who_said_it: The person who said or wrote the quotation.",
    "quotation: The actual quoted text.",
    "when_it_was_said_or_written: The time period or date when the quotation was said or written, or 'null' if unknown.",
    "",
    "Return the result in the following format:",
    "",
    "{",
    "\"quotations\": [",
    "{",
    "\"who_said_it\": \"Albert Einstein\",",
    "\"quotation\": \"Imagination is more important than knowledge.\",",
    "\"when_it_was_said_or_written\": \"1929\"",
    "},",
    "{",
    "\"who_said_it\": \"Mahatma Gandhi\",",
    "\"quotation\": \"Be the change you wish to see in the world.\",",
    "\"when_it_was_said_or_written\": null",
    "},",
    "{",
    "\"who_said_it\": \"Winston Churchill\",",
    "\"quotation\": \"Success is not final, failure is not fatal: It is the courage to continue that counts.\",",
    "\"when_it_was_said_or_written\": \"1941\"",
    "}",
    "]",
    "}",
    "",
    "If any field cannot be determined, assign 'null' to that field."
  ],
  "summary_prompt": [
    "Instruction: Analyze the provided text and generate a concise summary that captures the main points and key information. The summary should be written in the same language as the original text.",
    "",
    "Guidelines for the summary:",
    "1. Focus on the main events, ideas, or facts from the text.",
    "2. Exclude minor details, repetitions, and examples unless they are critical to understanding the main point.",
    "3. Keep the summary brief and clear, ideally in 3-5 sentences, but ensure that it covers all essential information.",
    "4. If the text includes opinions or perspectives, ensure to distinguish them as such in the summary.",
    "5. The summary must be written in the same language as the original article or text.",
    "",
    "Return the result in the following format strictly as a valid JSON object:",
    "",
    "{",
    "\"summary\": \"[Generated summary of the text in the same language as the original]\"",
    "}",
    "",
    "Example:",
    "",
    "{",
    "\"summary\": \"The text discusses the impact of climate change on coastal cities, emphasizing rising sea levels and increased storm frequency. Solutions like seawalls and renewable energy are proposed, but the text highlights challenges in policy implementation.\"",
    "}",
    "",
    "If the text lacks enough information for a proper summary, return:",
    "{",
    "\"summary\": \"Summary unavailable due to insufficient information.\"",
    "}"
  ]
}